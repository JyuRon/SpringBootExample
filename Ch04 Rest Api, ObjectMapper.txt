Ch04. 스프링 부트 시작하기

*** Controller를 생성할때 기본적인 annotation ***

@Controller
    html파일의 정보를 반환한다.

@ResponseBody
    Controller에서 json형태로 반환하기 위해 주로 사용(ResponseEntity도 사용가능)

@RestController
    대게 api 즉 json파일로 반환할때 사용한다.
    @Controller + @ResponseBody

@RequestPhram
    GET, DELETE에서 주로 사용
    @RequestParam(required = false) Integer age
	해당 어노테이션을 안써줘도 됨, 이 경우 required = false임

@RequestBody
    PUT, POST에서 사용,  client측이 body에 내용을 담기 때문이다

@PathVariable
    모든 REST Method에서 사용 가능능


*** Response Type ***
(1) String
(2) JSON : Dto
(3) ResponseEntity<T>
    응답의 header, body등을 customer 하여 반환
    ResponseEntity.status(HttpStatus.CREATED).body(user)




*** Json Naming 규칙 ***
Java에서는 변수 명을 Camel Case로 작성을 하고 json에서는 Snacke Case로 작성하게 된다.
이처럼 변수명이 다르게 될 경우 원하는 변수에 파싱을 할 수 없기에 추가적인 설정이 필요

@JsonProperty
    각각의 멤버에 json 네이밍 규칙을 지정

@JsonNaming
    클래스 전체의 멤버에 대해 네이밍 규칙 지정
	JsonNaming(value = PropertyNamingStrategy.SnakeCaseStrategy.class)

@JsonInclude
    Response로 Json이 return이 되어야 할 경우 포함되어야 할 규칙을 지정
    JsonInclude(JsonInclude.Include.NON_NULL)
    값이 null이 아닌 것을 포함시킨다.






*** Object Mapper ****
Spring에서 Controller로 들어오는 json은 Dto로 매핑이 자동으로 되지만
수동으로 하는 방법을 알아보자
object mapper가 사용되는 class는 getXXX로 시직하는 메소드가
getter/setter로 생성된 method가 아닌 경우 에러를 유발함

(1) object -> text
    object mapper는 get method를  활용한다.
    objectMapper.writeValueAsString(objectMapperTestDto)
    {"name":"steve","age":10,"phone_number":"010-1234-4567"}

(2) text -> object
    default 생성자를 필요로 한다.
    objectMapper.readValue(text, ObjectMapperTestDto.class)
    ObjectMapperTestDto{name='steve', age=10, phoneNumber='010-1234-4567'}

(3) json 문법 검사 & prettyString
    https://jsonformatter.curiousconcept.com/



*** InteliJ UTF-8 Setting ****
ObjectMapper를 사용하는 과정에서 json의 경우 기본 인코딩이 UTF-8이기 때문에
변경해주는 과정이 필요하다.(윈도우 한정)

FILE -> SETTING에서 encoding검색후 모두 utf-8로 변경

help >> find action

edit custom vm option에서 마지막줄에
-Dfile.encoding=UTF-8
