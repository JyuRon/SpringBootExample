**** Filter ****

- Filter 동작 방식
    request -> filter(전처리) -> controller -> filter(후처리)-> response

class A implements Filter{} ---> import javax.servlet.Filter

@Override
public void doFilter(
    ServletRequest request,
    ServletResponse response,
    FilterChain chain) throws IOException, ServletException {

    // Filter 의 전처리, 후처리의 기준점
    chain.doFilter(httpServletRequest, httpServletResponse);
}


- request, response의 body 내용 읽어오기
    BufferedReader br = httpServletRequest.getReader();
    이 방법으로 filter에서 내용을 읽어오면 controller에서 내용을 읽어오지 못한다.
    spring에서 stream(1회성) 형태로 내용을 제공하기 때문이다.


- contentCaching 으로 재사용 하기
     ContentCachingRequestWrapper httpServletRequest =
        new ContentCachingRequestWrapper((HttpServletRequest)request);
     ContentCachingResponseWrapper httpServletResponse =
        new ContentCachingResponseWrapper((HttpServletResponse) response);


- request caching
    ContentCachingRequestWrapper를 사용해도 여전히 controller에서 body 내용을 읽지 못하는 현상이 발생한다.
    ContentCachingRequestWrapper 생성자 에서는 cachedContent 크기에 대한 설정만 한다(내용은 들어가지 않는다.)
    즉, controller가 body 내용을 한번 읽어야만 caching 기능을 정상적으로 사용할 수 있다.
    이러한 이유로 request body에 대한 내용 출력은 chan.doFilter 이후가 되어야 한다.

- response caching
    request 와 마찬가지로 filter에서 response의 body 내용을 읽어버리면 client에서 받는 내용은 빈 값이다.
    spring에서 stream(1회성) 형태로 내용을 제공하기 때문이다.
    이러한 상황을 해결하고자 ContentCachingRequestWrapper 에는 없는 method인
    httpServletResponse.copyBodyToResponse() 를 사용하면 client는 정상적인 값을 받을 수 있다.






**** Interceptor ****
Interceptor는 Filter 와 유사한 기능을 한다. 하지만 다음과 같은 차이점이 존재한다.

Filter : webapplication context
Iinterceptor : spring context


- Interceptor 등록
    WebMvcConfigurer 를 상속한 MvcConfig - addInterceptors 메서드에 등록한다.

    registry.addInterceptor(authInterceptor);
        해당 방법은 모든 경로에 대해 인터셉터가 작동하게 된다.
        모든 경로이기 때문에 리소스 낭비가 심할 것을 충분히 예상을 할 수 있다.
        이러한 부분을 방지하고자 특정 method, 특정 annotation 이 붙은 경우에만 동작하도록 설정한다.

    registry.addInterceptor(authInterceptor).addPathPatterns("/interceptor/private/*");
        path 별로 interceptor 동작을 직접 지정할 수 있어 가장 깔끔한 방법이라 생각한다.



- HttpServletRequest Body 값 추출
    현재 프로젝트에서는 filter -> GlobalFilter를 적용하여 controller에서 처리한 내용이 caching 이 되어 있는 상태이다.
    즉 Filter단에서 ContentCachingRequestWrapper를 사용하여 객체를 doFilter 메소드로 넘겨주면
    (ContentCachingRequestWrapper) request로 형변환이 가능하며 캐싱 또한 사용가능하다.
    preHandle 에서는 controller 진입 전이기 때문에 해당기능을 사용하지 못 하기 때문에 postHandle에서 사용해야 한다.
