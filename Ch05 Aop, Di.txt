**** IOC, DI ****

@Component("sample")
    해당 클래스를 빈으로 등록하며 default값은 첫글자가 소문자이다.
    이름 지정이 가능하다.

@Qualifier("beanName")
    컴포넌트로 지정된 클래스가 객체를 받아 빈이 생성되어야 하는데
    스프링 컨테이너에 동일한 객체가 있는 경우 에러가 발생
	이 경우 빈의 이름을 직접 지정하여 객체를 주입한다.

@Configuration
    해당 어노테이션은 @Component로 지정되어 있으며 사용자가 필요한 @Bean을
    여러개 만들 떄 사용한다.

@Bean("name")
    동일한 이름의 Bean이 생성이 될 경우를 차단하기 위해 직접 이름을 지정한다.

@Autowired
    DI를 위한 곳에 사용

@Resource
    @Autowired + @Qualifier 의 개념으로 이해해





*** Spring Context에서 직접 Bean을 가져오기 ***

ioc -> ApplicationContextProvider 참고
ApplicationContext context = ApplicationContextProvider.getContext();

UrlEncoder urlEncoder = context.getBean(UrlEncoder.class);
Encoder encoder = context.getBean("base64Encoder",Encoder.class);






**** AOP : 관점지향****
build.grangle에 implementation 'org.springframework.boot:spring-boot-starter-aop' dependency추가

@Aspect
    AOP를 사용하기 위한 어노테이션, @Component와 같이 사용한다

@Pointcut
    빈 메소드 위에 선언하며 aop를 적용할 범위를 지정한다
	@Pointcut("execution(* com.example.aop.controller..*.*(..))")
	@Pointcut("@annotation(com.example.aop.annotation.Decode)")
	@Pointcut("within(com.xyz.myapp.trading..*)")
	@Pointcut("anyPublicOperation() && inTrading()")

@Before
    메소드가 실행되기 전

@After
    메소드가 실행된 후, 예외가 발생해도 실행

@AfterReturing
    미리 정의된 포인트컷에서 return이 발생된 후 실행

@AfterThrowing
    미리 정이된 포인트컷에서 exception이 발생될 경우 실행

@Around
    포인트컷의 전/후에 필요한 동작을 추가함



