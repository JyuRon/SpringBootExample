**** validation *****
implementation("org.springframework.boot:spring-boot-starter-validation")

@Pattern(regexp = "^\\d{2,3}-\\d{3,4}-\\d{4}$", message = "input error message")
	정규식 사용

@Valid
    public Object user(@Valid @RequestBody User user, BindingResult bindingResult){}
    @Max, @Email등의  어노테이션이 붙은 클래스(멤버만 해당) 검증을 실행할때 사용한다
	BindingResult의 경우 검증이 실패할 경우 결과가 저장된다.

	@Valid
    private List<Car> cars;
	검증하는 멤버가 객체일 경우 그 객채-> 멤버위에 한번 더 써준다.

@NotNull : null 불가
@NotEmpty : null, "" 불가
@NotBlank : null,""," " 불가
@Size(min = 6, max = 6)
@Past : 과거날짜
@PastOrPresent : 오늘이나 과거 날짜
@Future : 미래날짜
@FutureOrPresent : 오늘이거나 미래날짜
@Max, @Min(value = 0)

@AssertTrue/False : 별도 Logic 적용  ---> custom
	검증될 클래스에 isXXX로 시작하는 메서드로 Logic을 작성한다

	@AssertTrue // 결과가 true인 경우 검증 통과
	public boolean isAssert(){}



**** Validated ****

Spring에서는 이런 경우를 위해 인터셉터 기반으로 메소드의 요청을 가로채서
유효성 검증을 진행 할 수 있는 @Validated를 제공하고 있다.
JSR 표준 기술이 아니며 Spring 프레임워크에서 제공하는 어노테이션 및 기능이다.


- 클래스에 선언 하는 경우
https://mangkyu.tistory.com/174

요청 파라미터의 유효성 검증은 컨트롤러에서 처리하고 서비스나 레포지토리 계층에서는 유효성 검증을 하지 않는 것이 바람직하다.
하지만 개발을 진행하다보면 불가피하게 서비스 계층 등에서 파라미터를 검증해야 할 수 있다.
    추가내용) controller에서 @RequestParam, @PathVariable 등을 검증해야 할 경우


클래스 레벨에 선언하면 해당 클래스에 유효성 검증을 위한 인터셉터(MethodValidationInterceptor)가 등록된다.
그리고 해당 클래스의 메소드들이 호출될 때 AOP의 포인트 컷으로써 인터셉터를 통해 유효성 검증이 진행된다.
이를 통해 컨트롤러, 서비스, 레포지토리 등 계층에 무관하게 스프링 빈이라면 유효성 검증을 진행할 수 있다.
물론 당연히 유효성 검증이 진행될 메소드에는 @Valid를 선언해주어야 한다.
    추가내용) @Valid 뿐만 아니라 @Email 등 검증이 필요한 모든 경우에 해당된다.
    추가내용) 스프링 빈이 핵심이다!



- 메소드에 선언 하는 경우
https://velog.io/@damiano1027/Spring-Valid-Validated%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%A6%9D
@Valid와 비슷하지만 그룹으로 지정한 validation만 검증이 가능하다


- @Valid 와의 차이점
    @Valid의 경우 자바 표준 스펙으로 사용되며 controller의 Dto를 검증하는데 사용된다.
    검증에 실패할 경우 MethodArgumentNotValidException

    @Validated의 경우 Spring에서 제공하는 기능으로 Spring Bean의 유효성을 검증하는데 사용된다.
    검증에 실패할 경우 ConstraintViolationException
    Controller에서 사용할 경우 어느 한 메서드에서 @Valid 를 선언하여 검증에 실패하면
    ConstraintViolationException가 아닌 MethodArgumentNotValidException가 발생한다.












